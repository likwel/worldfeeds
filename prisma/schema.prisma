// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          String    @id @default(cuid())
  uniqueId    String    @unique
  source      String
  title       String
  link        String
  summary     String?
  creator     String?
  categories  String?
  enclosureUrl String?
  enclosureType String?
  enclosureLength String?
  thumbnail   String?
  imageUrl    String?
  publishedAt DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // âœ… Nouvelles colonnes
  viewCount   Int       @default(0) // compteur global de vues

  favorites   Favorite[]
  reviews     Review[]
  likes       Like[]    // ðŸ”¹ relation inverse

  @@index([publishedAt])
  @@index([source, publishedAt])
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String?
  apiKeys   ApiKey[]
  favorites Favorite[]
  reviews   Review[]
  likes     Like[]    // ðŸ”¹ relation inverse
  createdAt DateTime  @default(now())
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  name      String?
  hashedKey String   @unique
  last4     String?
  revoked   Boolean  @default(false)
  createdAt DateTime  @default(now())
  lastUsedAt DateTime?
  expiresAt DateTime?
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())

  @@unique([userId, articleId]) // un seul like par user/article
}
